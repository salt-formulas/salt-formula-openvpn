{%- from "openvpn/map.jinja" import server with context %}

local {{ server.bind.address }}
port {{ server.bind.port }}

# TCP or UDP server?
proto {{ server.bind.get('protocol', 'udp') }}

{%- if server.auth is defined %}
{%- if server.auth.engine == 'pam' %}
plugin /usr/lib/openvpn/openvpn-plugin-auth-pam.so openvpn
client-cert-not-required
{%- endif %}
{%- if server.auth.engine == 'google-authenticator' %}
plugin /usr/lib/openvpn/openvpn-plugin-auth-pam.so openvpn
reneg-sec 36000
{%- endif %}

{%- if server.auth.cipher is defined %}
# AES-256-CBC
cipher {{ server.auth.cipher }}
{%- endif %}

{%- endif %}

# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
dev {{ server.get('device', 'tun') }}

# SSL
ca {{ server.ssl.get('ca_file', "/etc/openvpn/ssl/ca.crt") }}
cert {{ server.ssl.get('cert_file', "/etc/openvpn/ssl/server.crt") }}
key {{ server.ssl.get('key_file', "/etc/openvpn/ssl/server.key") }}
dh /etc/openvpn/ssl/dh2048.pem

{%- if server.get('topology', 'subnet') == 'subnet' %}
{% include "openvpn/files/_subnet.conf" %}
{%- elif server.topology == 'gateway' %}
{% include "openvpn/files/_gateway.conf" %}
{%- endif %}

{%- for route in server.get('routes', []) %}
push "route {{ route.network }} {{ route.netmask }}"
{%- endfor %}

{%- if server.get("client_to_client", False) %}
# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
client-to-client
{%- endif %}

{%- if server.get("duplicate_dn", False) %}
# Uncomment this directive if multiple clients
# might connect with the same certificate/key
# files or common names.  This is recommended
# only for testing purposes.  For production use,
# each client should have its own certificate/key
# pair.
#
# IF YOU HAVE NOT GENERATED INDIVIDUAL
# CERTIFICATE/KEY PAIRS FOR EACH CLIENT,
# EACH HAVING ITS OWN UNIQUE "COMMON NAME",
# UNCOMMENT THIS LINE OUT.
duplicate-cn
{%- endif %}

# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
keepalive 10 60
inactive 600

# For extra security beyond that provided
# by SSL/TLS, create an "HMAC firewall"
# to help block DoS attacks and UDP port flooding.
#
# Generate with:
#   openvpn --genkey --secret ta.key
#
# The server and each client must have
# a copy of this key.
# The second parameter should be '0'
# on the server and '1' on the clients.
;tls-auth ta.key 0

{%- if server.get('compression', True) %}
comp-lzo
{%- endif %}

{%- if server.get('max_clients', False) %}
max-clients {{ server.max_clients }}
{%- endif %}
user nobody
group nogroup

persist-key
persist-tun

;status openvpn-status.log
;log         openvpn.log
;log-append  openvpn.log

verb {{ server.get('verbosity', 3) }}
;mute 20

{#-
    vim: syntax=jinja
-#}
